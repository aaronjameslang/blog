{"0": {
    "doc": "CloudFront Invalidation",
    "title": "CloudFront Invalidation",
    "content": "Hosting sites serverlessly using AWS S3 and CloudFront is a simple and affordable solution. Deploys can be automated simply using the serverless framework and the S3 sync plugin. Once you’ve synced your files up to your S3 bucket, you can use the below script to clear your CloudFront cache. Automating this as part of your deploy process will save confusion when your client can’t see your updates. const AWS = require('aws-sdk') const params = { DistributionId: process.env.AWS_DISTRIBUTION_ID, InvalidationBatch: { CallerReference: Date.now(), Paths: { Quantity: 1, Items: ['/*'] } } } new AWS.CloudFront({ apiVersion: '2020-05-31' }) .createInvalidation(params, function (err, data) { if (err) { console.error(err, err.stack) throw err } console.log('Invalidation complete') console.debug(data) }) . ",
    "url": "/blog/cloudfront-invalidation.html",
    "relUrl": "/cloudfront-invalidation.html"
  },"1": {
    "doc": "Explicit Versioning",
    "title": "Explicit Versioning",
    "content": "Versioning is an important part of software development, but simply having a version number isn’t much use if your users can’t access it. In almost every piece of software you’ve installed there’ll be an “About” menu with details on which version of the software you have. Debugging issues if far easier if you know which version of your software has the bug. Visible version information is also important (although less common) for software presented as a service, such as a web application. Both web sites and APIs benefit from user-facing versioning, whether it’s during internal testing or in production. Sometimes, knowing when an issue occured can narrow down the version that caused it. This isn’t a robust solution however, espicially if the bug report doesn’t specify a timezone. Caching issues can mean the user may not be experiencing the version that’s officially been deployed, and canary deployments mean you could have multiple versions live at the same time and no way to know which the user is seeing. Explicit versioning is also useful during development and testing, allowing developers, testers, project managers and operations to see what version is available in which environment in real time so that issue can be better reported, more easily reproduced and tested, and more swiftly resolved. Giving operational staff a way to check what version is live is also a quick and easy smoke test after any deployment. One way to acheive this is to include the below script as an early part of your build process. It produces a json file which can easily be imported/read/compiled during the build, and the data used to display the version at runtime. You can use the build information to display a version on the login screen and/or subtley in the footer. If you choose to only display some of the information, you can make the rest available as a tool-tip or via console.log. Or if you’re building an API you can expose a GET /version endpoint that returns the json as-is. #! /bin/sh set -eu # This file should be saved as scripts/build-info.sh or similar, and # run early in the build process to allow other code to import/read/link # the generated file and make the information available to the end user. # If the version you are building is tagged the tag will be used, # like \"v1.4.3\" # If the version you are building is not tagged the previous tag will # be used and the number of commits since the last tag and the hash of # the current commit will be appended, like \"v1.4.3-20-g1a5ef12\" # If you have uncommitted changes, such as during development, \"dirty\" # will be appended like \"v1.4.3-dirty\" # If you have not yet created any tags you will get the error # \"fatal: No names found, cannot describe anything\". If needed you can # tag your root commit v0.0.0 version=$(git describe --dirty --tags) # This is an ISO-8601 timestamp which can be easily interpreted by # humans and most computer systems. The format is given explicity here # to be compatible with mac and linux when=$(date +%Y-%m-%dT%H:%M:%S%z) # The name of the current user account. It can be useful to know if # the build was created manually/locally or by an automated system. who=${USER-} # You should add build-info.json to your .gitignore cat &lt;&lt; EOF &gt; build-info.json { \"version\": \"$version\", \"when\": \"$when\", \"who\": \"$who\" } EOF . Recording versions elsewhere such as package.json can be useful if you’re distributing a library for example, but the above script provides continous, automatic and specific version information during development and for systems which are continously deployed. An example react component: . import buildInfo from '../build-info.json' export const Footer = () =&gt; { return ( &lt;span&gt; Copyright {new Date().toLocaleDateString(undefined, { year: 'numeric'})} &lt;/span&gt; &lt;span style={{ textAlign: 'right' }} title={JSON.stringify(buildInfo, null, 2)}&gt; {buildInfo.version} &lt;/span&gt; ) } . An example express route: . const express = require('express') const buildInfo = require('../build-info.json') const app = express() app.get('/build-info', function (req, res) { res.send(JSON.stringify(buildInfo, null, 2)) }) . ",
    "url": "/blog/explicit-versioning.html",
    "relUrl": "/explicit-versioning.html"
  },"2": {
    "doc": "Headless Raspberry Pi",
    "title": "Headless Raspberry Pi Setup",
    "content": " ",
    "url": "/blog/headless-raspberry-pi.html#headless-raspberry-pi-setup",
    "relUrl": "/headless-raspberry-pi.html#headless-raspberry-pi-setup"
  },"3": {
    "doc": "Headless Raspberry Pi",
    "title": "Preparing the SD card",
    "content": "First we need grab ourselves an OS image. While that’s downloading, we can list the attached drives before and after inserting our SD card, to find it’s device name. &gt; lsblk -p NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT /dev/mmcblk0 179:0 0 14.9G 0 disk └─/dev/mmcblk0p1 179:1 0 14.9G 0 part /media/aaron/9016-4EF8 . Once the image is downloaded, we can decompress it and write it to the SD card. unzip ~/Downloads/2022-01-28-raspios-bullseye-armhf-lite.zip sudo dd if=./2022-01-28-raspios-bullseye-armhf-lite.img \\ of=/dev/mmcblk0 bs=4M conv=fsync status=progress . This might take a minute or two. -p pipes the contents to stdout rather than disk, and fsync ensure dd flushes writes to the SD card on completion. After it’s finished, we can remove and re-insert the card to see the new partitions. &gt; lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT mmcblk0 179:0 0 14.9G 0 disk ├─mmcblk0p1 179:1 0 256M 0 part /media/aaron/boot └─mmcblk0p2 179:2 0 1.6G 0 part /media/aaron/rootfs . My OS has handily mounted this for me, you may have to do that manually. &gt; cd /media/aaron &gt; ls boot rootfs . To enable ssh on boot we can create the below empty file. &gt; touch boot/ssh . And configure the WiFi connection. &gt; vim boot/wpa_supplicant.conf ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev country=&lt;Insert 2 letter ISO 3166-1 country code here&gt; update_config=1 network={ ssid=\"&lt;Name of your wireless LAN&gt;\" psk=\"&lt;Password for your wireless LAN&gt;\" } . Note that you are writing your WiFi password in plaintext on an unencrypted filesystem, so don’t leave this pi anywhere bad actors might have physical access. If you want to add multiple networks add id_str with a unique name like . ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev country=&lt;Insert 2 letter ISO 3166-1 country code here&gt; update_config=1 network={ ssid=\"&lt;Name of your wireless LAN&gt;\" psk=\"&lt;Password for your wireless LAN&gt;\" id_str=\"Home_2.4GHz\" } network={ ssid=\"&lt;Name of your wireless LAN&gt;\" psk=\"&lt;Password for your wireless LAN&gt;\" id_str=\"Home_5GHz\" } . We want our pi to have a predictable IP. This can be done though DHCP reservation if your router supports it, but raspberry pis have a habit of randomising their MAC address which makes that tricky. A more reliable solution is to assign a static IP address on the pi itself. Check your router settings to ensure you pick an IP address that won’t be assigned to another device via DHCP. Pick a hostname and IP address. You can get inspiration from any ordered set, chemical elements, roman emperors, I usually use pokemon. This device will be named zenigame and have IP address 192.168.1.7. Open rootfs/etc/dhcpcd.conf and append the following lines. Your router address may vary, try sudo arp-scan --localnet if you’re not sure. static ip_address=192.168.1.7/24 static routers=192.168.1.254 static domain_name_servers=192.168.1.254 . Note that this sets the same IP address for both the WiFi and ethernet interfaces, so you may not be able to use both at once. To set the hostname, edit rootfs/etc/hostname and rootfs/etc/hosts and change the default raspberrypi to your chosen name, I’m using zenigame. I also like to customise rootfs/etc/motd with some ascii art, I’m going to be using this by Maija Haavisto. This is about as far as we can get with the pi offline, so let’s unmount the SD card. &gt; sudo umount boot &gt; sudo umount rootfs . Insert the SD card in to the raspberry pi and power it on. ",
    "url": "/blog/headless-raspberry-pi.html#preparing-the-sd-card",
    "relUrl": "/headless-raspberry-pi.html#preparing-the-sd-card"
  },"4": {
    "doc": "Headless Raspberry Pi",
    "title": "Pi Online",
    "content": "The only indication we get from the pi directly is the power LED, but we can run arp-scan and wait for it’s IP to show up. &gt; sudo arp-scan --localnet 192.168.1.7 dc:a6:32:a4:ad:bb Raspberry Pi Trading Ltd . We can add an entry to our .ssh/config like below . Host zenigame Hostname 192.168.0.9 User pi . and attempt to connect with the default password ‘raspberry’ . &gt; ssh zenigame . Press ctrl-d to logout. Assuming you have your ssh keys setup locally you can run . &gt; ssh-copy-id zenigame . Once complete you should be able to run ssh zenigame without being asked for a password. Now we’re not at risk of locking ourselves out we can change the password. We won’t be using it much so I’d suggest making it random and keeping it in a password manager. &gt; ssh zenigame pi&gt; passwd . vim is not installed by default, only vi. You may wish to install vim or simply alias to vi. Let’s update the system, which will also test our network connection. pi&gt; sudo apt update pi&gt; sudo apt upgrade . Let’s also set up the system to automatically install it’s own security updates. pi&gt; sudo apt install unattended-upgrades apt-listchanges . Open the config . pi&gt; vi /etc/apt/apt.conf.d/50unattended-upgrades . and uncomment and set . Unattended-Upgrade::Mail \"root\"; . ",
    "url": "/blog/headless-raspberry-pi.html#pi-online",
    "relUrl": "/headless-raspberry-pi.html#pi-online"
  },"5": {
    "doc": "Headless Raspberry Pi",
    "title": "Future Exploration",
    "content": "How best to check this mail? Can we install a web mail interface? Or forward the mail to another email address? Is there a client I can run from my main machine that will connect over ssh? . Does unattended upgrades work out of the box for raspberry pi systems? Some suggest that we need to also edit the sources in that config file, some do not. I’ll leave it as default for now and monitor. https://raspberrypi.stackexchange.com/questions/38931/how-do-i-set-my-raspberry-pi-to-automatically-update-upgrade . You can monitor these files to check on the automation . /var/log/unattended-upgrades/unattended-upgrades.log /var/log/unattended-upgrades/unattended-upgrades-dpkg.log /var/log/dpkg.log /var/log/apt/history.log . ",
    "url": "/blog/headless-raspberry-pi.html#future-exploration",
    "relUrl": "/headless-raspberry-pi.html#future-exploration"
  },"6": {
    "doc": "Headless Raspberry Pi",
    "title": "Headless Raspberry Pi",
    "content": " ",
    "url": "/blog/headless-raspberry-pi.html",
    "relUrl": "/headless-raspberry-pi.html"
  },"7": {
    "doc": "Exponential Linear Intersection",
    "title": "Exponential Linear Intersection",
    "content": "For a given exponential curve and a given line, can we know if and where they intersect? . That is, for two equations \\(y\\) and \\(z\\) \\[ y = mx + b \\] \\[ z = e^{nx} + c\\] can we solve \\(y = z\\), or even tell if there is a solution? \\[ mx + b = e^{nx} + c \\] . A better mathmatician than I might be able to solve that, but in the meantime let's graph an example. Below \\(y\\) intersects \\(z\\), but not \\(z'\\). Looking at this graph we can see that the exponential gradient starts shallow and ends up steep. And if the curves intersect, it must be at points where there gradients are unequal, else they'd be parralel. Assuming both curves have a positive gradient, at the first intersection the gradient of \\(z\\) must be less than that of \\(y\\), and vice versa at the second intersection. And as both curves are smooth, somewhere in between these intersections the gradients must be equal. Differentiating these functions we get \\[ {dy \\over dx} = m \\] \\[ {dz \\over dx} = ne^{nx}\\] and when equated we can easily solve for \\(x\\) \\[ ne^{nx} = m \\] \\[ e^{nx} = { m \\over n } \\] \\[ nx = \\ln { m \\over n } \\] \\[ nx = \\ln m - \\ln n \\] \\[ x = { \\ln m - \\ln n \\over n } \\] . So now we know that when \\( x = { \\ln m - \\ln n \\over n } \\) the lines are parallel, and if the lines intersect at all \\(z\\) must be less than \\(y\\) at this point. Once we know there the lines intersect, we can resort to numerical methods to find the intersection itself, such as a binary search or the Newton-Raphson method. ",
    "url": "/blog/exponential-linear-intersection/",
    "relUrl": "/exponential-linear-intersection/"
  },"8": {
    "doc": "UK House Prices",
    "title": "UK House Prices",
    "content": "If you’re looking to buy a house, you might be interested in what the housing market will look like in the future. By the time you’ve saved up your deposit, it may no longer be enough to afford the house you want! . Just by glancing at the graph above we can see that house prices go up over the long term, but predicting even a few years ahead is difficult. Trends plotted in 1990 or 2007 would not have been accurate a few years later. Many finance trends are exponential, so let’s look at the above data on a logarithmic scale. Now the same data paints a different picture, if fact in you squint hard enough you can almost see a linear trend. Smoother data is easier to predict, and the 2008 financial crash does look a lot less pronounced from this perspective, appearing to be merely a reversion to the “expected” price. However the 1990s slump is still there, and new irregularities have even appeared, such as the boom in the early 1970s. An easing of credit conditions by the Bank of England coupled with the go-for-growth strategy of the Conservative chancellor, Tony Barber, resulted in house-price inflation peaking at 36%. The average price of a home, which had risen from £2,000 to £5,000 between 1950 and 1970, doubled in the next three years. The boom ended when the Yom Kippur war and the Opec oil embargo ushered in the stagflation of the mid-1970s. L. Elliot, A brief history of British housing . In an effort to find more predictable data, let’s limit ourselves to the last 10 years. This is a somewhat abritrary time frame, but does exclude the 2008 crash and some of it’s aftershocks. Here we can see that between ? and ? house prices rose from to around , that’s ?% over the decade or an APR of ?%. Data courtesy of HM Land Registry . ",
    "url": "/blog/uk-house-prices/",
    "relUrl": "/uk-house-prices/"
  },"9": {
    "doc": "Self-Documenting Micro-Servers",
    "title": "Self-Documenting Micro-Servers",
    "content": "If you’re anything like me, you have a number of small computers in your home (e.g. raspberry pi’s) providing various services. After some time it’s easy to forget which services are available on which servers, or even how to connect and make use of those services. Or perhaps you want to provide guides for your family or guests to be able to use these services. The best solution I’ve found is to serve these documents from the servers themselves over HTTP. This has the benefits of making the documents easy to access for non-technical folk, and a making it easy to update the docs whenever you update the server. To start let’s install a web server on our micro-server. &gt; sudo apt install apache2 . You should now be able to visit the IP address of your server to see the default Apache homepage. If you’ve set the host name and your client supports mDNS (Android does not) you can browse by host name, such as my-raspberry-pi.local. We’re going to publish some docs about this server via the web server. If you’re planning to run a web server for some other purpose, you can use virtual hosts to publish the docs at another port, like 8008 or 8080. The default homepage is /var/www/html/index.html, you can edit this and replace it with your own content like . &lt;h1&gt;my-raspberry-pi&lt;/h1&gt; &lt;p&gt; This is a Model 4B Raspberry Pi with a red and white case. &lt;/p&gt; &lt;h2&gt;File Sharing&lt;/h2&gt; &lt;p&gt; This server hosts a smb file share. To join from your Mac open up the Finder and click Go, Connect to Server. Then type smb://192.168.1.11. Click Connect, you won't need a password. &lt;/p&gt; &lt;h2&gt;Minecraft&lt;/h2&gt; &lt;p&gt; This server hosts a minecraft server. To join follow these steps: &lt;ol&gt; &lt;li&gt;In Minecraft, click Multiplayer&lt;/li&gt; &lt;li&gt;Click Add Server&lt;/li&gt; &lt;li&gt;Enter the server name \"Alice's Awesome Minecraft Server\"&lt;/li&gt; &lt;li&gt;Enter the address 192.168.1.11:25565&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; . Refreshing the web page should show you something like this. Basic, but functional and easy to set up. As you add or remove services on the server, you can update the docs. ",
    "url": "/blog/self-documenting-micro-servers/",
    "relUrl": "/self-documenting-micro-servers/"
  },"10": {
    "doc": "Self-Documenting Micro-Servers",
    "title": "Making it Smart",
    "content": "With a few changes we can have the page dynamically generated each time, and include real-time information. Replace /var/www/hmtl/index.html with index.cgi and the following contents: . #! /bin/sh cat &lt;&lt; EOF Content-type: text/html &lt;html&gt; &lt;head&gt; &lt;title&gt;$(hostname)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;$(hostname)&lt;/h1&gt; &lt;h2&gt;File Sharing&lt;/h2&gt; &lt;p&gt; This server hosts a smb file share. To join from your Mac open up the Finder and click Go, Connect to Server. Then type smb://192.168.1.11. Click Connect, you won't need a password. &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; EOF . Here we’re using CGI to automatically fill in the host name. But if you refreshing the web page you’ll just see the contents of the script, it hasn’t run. We need to make a few more changes. Add this block to the vhost in /etc/apache2/sites-enabled/000-default.conf or a different vhost on a different port if you’re planning to use that one for something else. &lt;Directory \"/var/www/html\"&gt; AddHandler cgi-script .cgi Options +ExecCGI &lt;/Directory&gt; . Then make you script executable and enable the CGI module in Apache. &gt; sudo chmod +x /var/www/html/index.cgi &gt; sudo a2enmod cgi &gt; sudo service apache2 restart . Refreshing now should show you the rendered output of the script. We can add more details to help us easily monitor the server’s condition. #! /bin/sh cat &lt;&lt; EOF Content-type: text/html &lt;html&gt; &lt;head&gt; &lt;title&gt;$(hostname)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;$(hostname)&lt;/h1&gt; &lt;h2&gt;File Sharing&lt;/h2&gt; &lt;p&gt; This server hosts a smb file share. To join from your Mac open up the Finder and click Go, Connect to Server. Then type smb://192.168.1.11. Click Connect, you won't need a password. &lt;/p&gt; &lt;h2&gt;Monitoring&lt;/h2&gt; &lt;pre&gt;$(uptime)&lt;/pre&gt; &lt;pre&gt;$(free -h)&lt;/pre&gt; &lt;pre&gt;$(df)&lt;/pre&gt; &lt;pre&gt;$(netstat -tulp)&lt;/pre&gt; &lt;pre&gt;$(ip address)&lt;/pre&gt; &lt;pre&gt;$(apt list --upgradeable)&lt;/pre&gt; &lt;/body&gt; &lt;/html&gt; EOF . ",
    "url": "/blog/self-documenting-micro-servers/#making-it-smart",
    "relUrl": "/self-documenting-micro-servers/#making-it-smart"
  },"11": {
    "doc": "Self-Documenting Micro-Servers",
    "title": "Advanced Monitoring",
    "content": "For a more complete monitoring solution you might want to look at Monit, Monitorix or even Prometheus. These won’t replace your documentation, but you can link to them instead of rolling your own. #! /bin/sh cat &lt;&lt; EOF Content-type: text/html &lt;html&gt; &lt;head&gt; &lt;title&gt;$(hostname)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;$(hostname)&lt;/h1&gt; &lt;h2&gt;File Sharing&lt;/h2&gt; &lt;p&gt; This server hosts a smb file share. To join from your Mac open up the Finder and click Go, Connect to Server. Then type smb://192.168.1.11. Click Connect, you won't need a password. &lt;/p&gt; &lt;h2&gt;Monitoring&lt;/h2&gt; &lt;p&gt; This server uses [Monit](https://mmonit.com/monit). View the dashboard [here](192.168.1.11:2812). &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; EOF . ",
    "url": "/blog/self-documenting-micro-servers/#advanced-monitoring",
    "relUrl": "/self-documenting-micro-servers/#advanced-monitoring"
  },"12": {
    "doc": "Student Loan Calculator",
    "title": "Student Loan Calculator",
    "content": "Most graduates in the UK have a significant amount of student debt, but with low interest and means-based repayments taken directly from their pay cheques, few ever think about it. How soon will your loan be re-payed? Should you consider repaying your student loan early? Here we can answer those questions and more. This calculator assumes you’re on repayment plan 1. Figures are correct at time of writing. ",
    "url": "/blog/student-loan-calculator/",
    "relUrl": "/student-loan-calculator/"
  },"13": {
    "doc": "Student Loan Calculator",
    "title": "Repayments",
    "content": "For plan 1 the threshold is £1,657 a month, above which you’ll pay 9% of your salary. What’s your current yearly income pre-tax? . Each month you currently repay ?. Your repayment will go up if your income increases. We’ll assume a 10% annual raise every year. ",
    "url": "/blog/student-loan-calculator/#repayments",
    "relUrl": "/student-loan-calculator/#repayments"
  },"14": {
    "doc": "Student Loan Calculator",
    "title": "Interest Charges",
    "content": "Your debt will accrue interest at 1.1% APR. What’s the value of your student loan today? . Each month your debt accrues interest of ?. ",
    "url": "/blog/student-loan-calculator/#interest-charges",
    "relUrl": "/student-loan-calculator/#interest-charges"
  },"15": {
    "doc": "Student Loan Calculator",
    "title": "Write Off",
    "content": "Your loan will be written of 25 years after you graduate. When did you graduate? . Based on your graduation date, your loan will be written off ?, ? . ",
    "url": "/blog/student-loan-calculator/#write-off",
    "relUrl": "/student-loan-calculator/#write-off"
  },"16": {
    "doc": "Student Loan Calculator",
    "title": "Projection",
    "content": "Your last payment will be ?, ?. If you paid off your loan in full today, you would save ? in interest payments. If you have any debts at a higher rate or interest, pay those off first. If you have any investments at a higher rate of interests, or can make some, it’s not a good idea to pay your student loan of early. If your money stuck in a savings account earnings a lower rate of interest, it’s probably a good idea to put some of that towards paying off your loan early, as long as you keep enough savings for emergencies. ",
    "url": "/blog/student-loan-calculator/#projection",
    "relUrl": "/student-loan-calculator/#projection"
  },"17": {
    "doc": "Outbound Link Warnings",
    "title": "Outbound Link Warnings",
    "content": "Often to meet certification requirements or comply with regulations such as SOX or PCI-DSS, we need to warn users before they follow any link that leads away from our domain. Implementing this quickly across multiple sites with limited resources can be seem daunting, but the script below can be used to meet baseline requirements quickly. It’s not pretty, but it does he job! . Simply include the script below somewhere on your site: . /** * This listener detects when a visitor is about to navigate to a * different domain and warns them, with an option to cancel * * This is required for regulatory compliance */ window.addEventListener('click', function (e) { function findAnchor(node) { if (!node) return node if (node.tagName === 'A') return node return findAnchor(node.parentNode) } const anchor = findAnchor(e.target) if (!anchor) return if (anchor.hostname === window.location.hostname) return const leave = window.confirm('You are now leaving ' + window.location.hostname) if (!leave) e.preventDefault() }) . ",
    "url": "/blog/outbound-link-warnings.html",
    "relUrl": "/outbound-link-warnings.html"
  }
}
